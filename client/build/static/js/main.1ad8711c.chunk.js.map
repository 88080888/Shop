{"version":3,"sources":["redux/initialState.js","redux/postsRedux.js","redux/store.js","components/layout/MainLayout/MainLayout.js","components/views/Homepage/Homepage.js","components/views/Product/Product.js","components/views/OrderSummary/OrderSummary.js","components/views/Cart/Cart.js","components/views/NotFound/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["initialState","posts","data","loading","active","error","createActionName","name","FETCH_START","FETCH_SUCCESS","FETCH_ERROR","reducers","statePart","action","type","payload","Object","keys","forEach","item","combinedReducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Component","className","children","clsx","styles","root","theme","createMuiTheme","palette","primary","main","Boolean","window","location","hostname","match","ReactDOM","render","StylesProvider","injectFirst","ThemeProvider","CssBaseline","exact","path","component","Homepage","Cart","Product","OrderSummary","NotFound","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ad8711c.chunk.js","sourcesContent":["export const initialState = {\n  posts: {\n    data: {},\n    loading: {\n      active: false,\n      error: false,\n    },\n  },\n};\n","/* selectors */\nexport const getAll = ({posts}) => posts.data;\n\n/* action name creator */\nconst reducerName = 'posts';\nconst createActionName = name => `app/${reducerName}/${name}`;\n\n/* action types */\nconst FETCH_START = createActionName('FETCH_START');\nconst FETCH_SUCCESS = createActionName('FETCH_SUCCESS');\nconst FETCH_ERROR = createActionName('FETCH_ERROR');\n\n/* action creators */\nexport const fetchStarted = payload => ({ payload, type: FETCH_START });\nexport const fetchSuccess = payload => ({ payload, type: FETCH_SUCCESS });\nexport const fetchError = payload => ({ payload, type: FETCH_ERROR });\n\n/* thunk creators */\n\n/* reducer */\nexport const reducer = (statePart = [], action = {}) => {\n  switch (action.type) {\n    case FETCH_START: {\n      return {\n        ...statePart,\n        loading: {\n          active: true,\n          error: false,\n        },\n      };\n    }\n    case FETCH_SUCCESS: {\n      return {\n        ...statePart,\n        loading: {\n          active: false,\n          error: false,\n        },\n        data: action.payload,\n      };\n    }\n    case FETCH_ERROR: {\n      return {\n        ...statePart,\n        loading: {\n          active: false,\n          error: action.payload,\n        },\n      };\n    }\n    default:\n      return statePart;\n  }\n};\n","import {combineReducers, createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { initialState } from './initialState';\nimport { reducer as postsReducer } from './postsRedux';\n\n// define reducers\nconst reducers = {\n  posts: postsReducer,\n};\n\n// add blank reducers for initial state properties without reducers\nObject.keys(initialState).forEach(item => {\n  if (typeof reducers[item] == 'undefined') {\n    reducers[item] = (statePart = null) => statePart;\n  }\n});\n\nconst combinedReducers = combineReducers(reducers);\n\n// create store\nexport const store = createStore(\n  combinedReducers,\n  initialState,\n  composeWithDevTools(\n    applyMiddleware(thunk)\n  )\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\n// import { connect } from 'react-redux';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\n\nimport styles from './MainLayout.module.scss';\n\nconst Component = ({className, children}) => (\n  <div className={clsx(className, styles.root)}>\n    <h2>MainLayout</h2>\n    {children}\n  </div>\n);\n\nComponent.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\n// const mapStateToProps = state => ({\n//   someProp: reduxSelector(state),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   someAction: arg => dispatch(reduxActionCreator(arg)),\n// });\n\n// const Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport {\n  Component as MainLayout,\n  // Container as MainLayout,\n  Component as MainLayoutComponent,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\n// import { connect } from 'react-redux';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\n\nimport styles from './Homepage.module.scss';\n\nconst Component = ({className, children}) => (\n  <div className={clsx(className, styles.root)}>\n    <h2>Homepage</h2>\n    {children}\n  </div>\n);\n\nComponent.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\n// const mapStateToProps = state => ({\n//   someProp: reduxSelector(state),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   someAction: arg => dispatch(reduxActionCreator(arg)),\n// });\n\n// const Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport {\n  Component as Homepage,\n  // Container as Homepage,\n  Component as HomepageComponent,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\n// import { connect } from 'react-redux';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\n\nimport styles from './Product.module.scss';\n\nconst Component = ({className, children}) => (\n  <div className={clsx(className, styles.root)}>\n    <h2>Product</h2>\n    {children}\n  </div>\n);\n\nComponent.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\n// const mapStateToProps = state => ({\n//   someProp: reduxSelector(state),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   someAction: arg => dispatch(reduxActionCreator(arg)),\n// });\n\n// const Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport {\n  Component as Product,\n  // Container as Product,\n  Component as ProductComponent,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\n// import { connect } from 'react-redux';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\n\nimport styles from './OrderSummary.module.scss';\n\nconst Component = ({className, children}) => (\n  <div className={clsx(className, styles.root)}>\n    <h2>OrderSummary</h2>\n    {children}\n  </div>\n);\n\nComponent.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\n// const mapStateToProps = state => ({\n//   someProp: reduxSelector(state),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   someAction: arg => dispatch(reduxActionCreator(arg)),\n// });\n\n// const Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport {\n  Component as OrderSummary,\n  // Container as OrderSummary,\n  Component as OrderSummaryComponent,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\n// import { connect } from 'react-redux';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\n\nimport styles from './Cart.module.scss';\n\nconst Component = ({className, children}) => (\n  <div className={clsx(className, styles.root)}>\n    <h2>Cart</h2>\n    {children}\n  </div>\n);\n\nComponent.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\n// const mapStateToProps = state => ({\n//   someProp: reduxSelector(state),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   someAction: arg => dispatch(reduxActionCreator(arg)),\n// });\n\n// const Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport {\n  Component as Cart,\n  // Container as Cart,\n  Component as CartComponent,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport clsx from 'clsx';\n\n// import { connect } from 'react-redux';\n// import { reduxSelector, reduxActionCreator } from '../../../redux/exampleRedux.js';\n\nimport styles from './NotFound.module.scss';\n\nconst Component = ({className, children}) => (\n  <div className={clsx(className, styles.root)}>\n    <h2>NotFound</h2>\n    {children}\n  </div>\n);\n\nComponent.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\n// const mapStateToProps = state => ({\n//   someProp: reduxSelector(state),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   someAction: arg => dispatch(reduxActionCreator(arg)),\n// });\n\n// const Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport {\n  Component as NotFound,\n  // Container as NotFound,\n  Component as NotFoundComponent,\n};\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport { createMuiTheme, StylesProvider, ThemeProvider } from '@material-ui/core/styles';\nimport { CssBaseline } from '@material-ui/core';\n\nimport { store } from './redux/store';\n\nimport { MainLayout } from './components/layout/MainLayout/MainLayout';\nimport { Homepage } from './components/views/Homepage/Homepage';\nimport { Product } from './components/views/Product/Product';\nimport { OrderSummary } from './components/views/OrderSummary/OrderSummary';\nimport { Cart } from './components/views/Cart/Cart';\nimport { NotFound } from './components/views/NotFound/NotFound';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: '#2B4C6F' },\n  },\n});\n\nconst App = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <StylesProvider injectFirst>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <MainLayout>\n            <Switch>\n              <Route exact path='/' component={Homepage} />\n              <Route exact path='/cart' component={Cart} />\n              <Route exact path='/product' component={Product} />\n              <Route exact path='/cart/ordersummary' component={OrderSummary} />\n              <Route path='*' component={NotFound} />\n            </Switch>\n          </MainLayout>\n        </ThemeProvider>\n      </StylesProvider>\n    </BrowserRouter>\n  </Provider>\n);\n\nexport { App };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}