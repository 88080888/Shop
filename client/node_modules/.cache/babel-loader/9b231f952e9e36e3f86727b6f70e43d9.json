{"ast":null,"code":"import _defineProperty from \"/Users/katarzynaiwaszko/Documents/projekty_Kodilla/Shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/katarzynaiwaszko/Documents/projekty_Kodilla/Shop/src/components/views/OrderSummary/OrderSummary.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { OrderSummaryList } from '../../features/OrderSummaryList/OrderSummaryList';\nimport { OrderForm } from '../../features/OrderForm/OrderForm';\nimport { connect } from 'react-redux';\nimport { getAllCartProducts, clearCart } from '../../../redux/cartRedux.js';\nimport { addOrder } from '../../../redux/ordersRedux';\nimport styles from './OrderSummary.module.scss';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nclass Component extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: '',\n      surname: '',\n      email: '',\n      telephone: '',\n      ordered: '',\n      orderDetails: this.props.cartProducts\n    };\n\n    this.handleChange = event => {\n      const orderData = this.state.orderData;\n      const _event$target = event.target,\n            value = _event$target.value,\n            id = _event$target.id;\n      this.setState({\n        orderData: _objectSpread({}, orderData, {\n          [id]: value\n        })\n      });\n    };\n\n    this.setOrderDate = () => {\n      const orderData = this.state.orderData;\n      const date = new Date();\n      this.setState({\n        orderData: _objectSpread({}, orderData, {\n          ordered: date\n        })\n      });\n    };\n\n    this.submitForm = event => {\n      const orderData = this.state.orderData;\n      const addOrder = this.props.addOrder;\n      event.preventDefault();\n      let error = null;\n      if (!orderData.name.length || !orderData.surname.length || !orderData.email.length || !orderData.telephone.length) error = 'All form fields should be filled';else if (orderData.name.length > 15 || orderData.surname.length > 20) error = 'Name or surname is too long. Name max 15 characters, surname max 20';\n\n      if (!error) {\n        addOrder(orderData);\n        alert('Order submitted successfully');\n        this.setState({\n          orderData: {\n            name: '',\n            surname: '',\n            email: '',\n            telephone: '',\n            ordered: ''\n          }\n        });\n      } else {\n        alert(error);\n      }\n    };\n  }\n\n  totalCost() {\n    const cartProducts = this.props.cartProducts;\n    let totalCost = 0;\n    cartProducts.map(cartProduct => totalCost += cartProduct.totalPrice);\n    return totalCost;\n  }\n\n  clearCart() {\n    const clearCartProducts = this.props.clearCartProducts;\n    this.setState({});\n  }\n\n  render() {\n    const cartProducts = this.props.cartProducts;\n    const orderData = this.state.orderData;\n    return React.createElement(Paper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(OrderSummaryList, {\n      cartProducts: cartProducts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      className: styles.title,\n      gutterBottom: true,\n      variant: \"h4\",\n      component: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Total cost:\", this.totalCost(), \"$\"), React.createElement(OrderForm, {\n      orderData: orderData,\n      handleChange: this.handleChange,\n      submitForm: this.submitForm,\n      setOrderDate: this.setOrderDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }));\n  }\n\n}\n\nComponent.propTypes = {\n  cartProducts: PropTypes.array,\n  addOrder: PropTypes.func,\n  clearCartProducts: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  cartProducts: getAllCartProducts(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addOrder: orderData => dispatch(addOrder(orderData))\n});\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Component);\nexport { //Component as OrderSummary,\nContainer as OrderSummary, Component as OrderSummaryComponent };","map":{"version":3,"sources":["/Users/katarzynaiwaszko/Documents/projekty_Kodilla/Shop/src/components/views/OrderSummary/OrderSummary.js"],"names":["React","PropTypes","OrderSummaryList","OrderForm","connect","getAllCartProducts","clearCart","addOrder","styles","Paper","Typography","Component","state","name","surname","email","telephone","ordered","orderDetails","props","cartProducts","handleChange","event","orderData","target","value","id","setState","setOrderDate","date","Date","submitForm","preventDefault","error","length","alert","totalCost","map","cartProduct","totalPrice","clearCartProducts","render","title","propTypes","array","func","mapStateToProps","mapDispatchToProps","dispatch","Container","OrderSummary","OrderSummaryComponent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { OrderSummaryList } from '../../features/OrderSummaryList/OrderSummaryList';\nimport { OrderForm } from '../../features/OrderForm/OrderForm';\n\nimport { connect } from 'react-redux';\nimport { getAllCartProducts, clearCart } from '../../../redux/cartRedux.js';\nimport { addOrder } from '../../../redux/ordersRedux';\n\nimport styles from './OrderSummary.module.scss';\n\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nclass Component extends React.Component {\n  state = {\n    name: '',\n    surname: '',\n    email: '',\n    telephone: '',\n    ordered: '',\n    orderDetails: this.props.cartProducts,\n  }\n\n  static propTypes = {\n    cartProducts: PropTypes.array,\n    addOrder: PropTypes.func,\n    clearCartProducts: PropTypes.func,\n  }\n\n  totalCost() {\n    const { cartProducts } = this.props;\n\n    let totalCost = 0;\n\n    cartProducts.map(cartProduct => totalCost += cartProduct.totalPrice);\n\n    return totalCost;\n  }\n\n  handleChange = (event) => {\n    const { orderData } = this.state;\n    const { value, id } = event.target;\n\n    this.setState({\n      orderData: {\n        ...orderData,\n        [id]: value,\n      },\n    });\n  }\n\n  setOrderDate = () => {\n    const { orderData } = this.state;\n    const date = new Date();\n\n    this.setState({\n      orderData: {\n        ...orderData,\n        ordered: date,\n      },\n    });\n  }\n\n  clearCart() {\n    const {clearCartProducts} = this.props;\n    this.setState({\n    });\n  }\n\n  submitForm = (event) => {\n    const { orderData } = this.state;\n    const { addOrder } = this.props;\n\n    event.preventDefault();\n\n    let error = null;\n\n    if(!orderData.name.length || !orderData.surname.length || !orderData.email.length || !orderData.telephone.length) error='All form fields should be filled';\n    else if(orderData.name.length > 15 || orderData.surname.length > 20) error ='Name or surname is too long. Name max 15 characters, surname max 20';\n\n    if(!error) {\n      addOrder(orderData);\n      alert('Order submitted successfully');\n      this.setState({\n        orderData: {\n          name: '',\n          surname: '',\n          email: '',\n          telephone: '',\n          ordered: '',\n        },\n      });\n    } else {\n      alert(error);\n    }\n  }\n\n  render() {\n    const { cartProducts } = this.props;\n    const { orderData } = this.state;\n\n    return(\n      <Paper>\n        <OrderSummaryList cartProducts={cartProducts} />\n\n        <Typography className={styles.title} gutterBottom variant=\"h4\" component=\"h1\">\n          Total cost:{this.totalCost()}$\n        </Typography>\n\n        <OrderForm\n          orderData={orderData}\n          handleChange={this.handleChange}\n          submitForm={this.submitForm}\n          setOrderDate={this.setOrderDate}\n        />\n      </Paper>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  cartProducts: getAllCartProducts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addOrder: orderData => dispatch(addOrder(orderData)),\n});\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport {\n  //Component as OrderSummary,\n  Container as OrderSummary,\n  Component as OrderSummaryComponent,\n};\n"]},"metadata":{},"sourceType":"module"}