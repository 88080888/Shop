{"ast":null,"code":"import _defineProperty from \"/Users/katarzynaiwaszko/Documents/projekty_Kodilla/Shop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/katarzynaiwaszko/Documents/projekty_Kodilla/Shop/client/src/components/views/OrderSummary/OrderSummary.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\nimport { OrderSummaryList } from '../../features/OrderSummaryList/OrderSummaryList';\nimport { OrderForm } from '../../features/OrderForm/OrderForm';\nimport { connect } from 'react-redux';\nimport { getAllCartProducts, clearCartRequest, getCartProductsRequest } from '../../../redux/cartRedux.js';\nimport { addOrderRequest } from '../../../redux/ordersRedux';\nimport styles from './OrderSummary.module.scss';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport SendIcon from '@material-ui/icons/Send';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\n\nclass Component extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderData: {\n        name: '',\n        surname: '',\n        email: '',\n        phone: '',\n        message: '',\n        ordered: '',\n        totalCost: '',\n        orderDetails: this.props.cartProducts\n      }\n    };\n\n    this.handleChange = event => {\n      const orderData = this.state.orderData;\n      const _event$target = event.target,\n            value = _event$target.value,\n            id = _event$target.id,\n            name = _event$target.name;\n\n      if (id) {\n        this.setState({\n          orderData: _objectSpread({}, orderData, {\n            [id]: value\n          })\n        });\n      } else {\n        this.setState({\n          orderData: _objectSpread({}, orderData, {\n            [name]: value\n          })\n        });\n      }\n    };\n\n    this.setOrderParams = () => {\n      const orderData = this.state.orderData;\n      const date = new Date();\n      const totalCost = this.totalCost();\n      this.setState({\n        orderData: _objectSpread({}, orderData, {\n          ordered: date,\n          totalCost: totalCost\n        })\n      });\n    };\n\n    this.submitForm = async event => {\n      const orderData = this.state.orderData;\n      const _this$props = this.props,\n            addOrderRequest = _this$props.addOrderRequest,\n            cartProducts = _this$props.cartProducts;\n      event.preventDefault();\n      let error = null;\n      if (cartProducts.length === 0) error = 'Your cart is empty!';\n      if (!orderData.name.length || !orderData.surname.length || !orderData.email.length || !orderData.phone) error = 'All form fields should be filled';else if (orderData.name.length > 15 || orderData.surname.length > 20) error = 'Name or surname is too long. Name max 15 characters, surname max 20';\n\n      if (!error) {\n        await addOrderRequest(orderData);\n        alert('Order submitted successfully');\n        this.clearCart();\n      } else {\n        alert(error);\n      }\n    };\n  }\n\n  componentDidMount() {\n    const getCartProducts = this.props.getCartProducts;\n    getCartProducts();\n  }\n\n  totalCost() {\n    const cartProducts = this.props.cartProducts;\n    let totalCost = 0;\n    cartProducts.map(cartProduct => totalCost += cartProduct.totalPrice);\n    return totalCost;\n  }\n\n  clearCart() {\n    const clearCartProducts = this.props.clearCartProducts;\n    this.setState({\n      orderData: {\n        name: '',\n        surname: '',\n        email: '',\n        phone: '',\n        message: '',\n        ordered: '',\n        totalCost: ''\n      }\n    });\n    clearCartProducts();\n  }\n\n  render() {\n    const cartProducts = this.props.cartProducts;\n    const orderData = this.state.orderData;\n    return React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(TableHead, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(TableRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      align: \"left\",\n      className: styles.tableHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Product\"), React.createElement(TableCell, {\n      align: \"center\",\n      className: styles.tableHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Quantity\"), React.createElement(TableCell, {\n      align: \"center\",\n      className: styles.tableHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Comment\"), React.createElement(TableCell, {\n      align: \"right\",\n      className: styles.tableHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Price\"))), React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, cartProducts.map(cartProduct => React.createElement(TableRow, {\n      key: cartProduct.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      align: \"left\",\n      className: styles.tableBodyEdge,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, cartProduct.name), React.createElement(TableCell, {\n      align: \"center\",\n      className: styles.tableBodyCenter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, cartProduct.quantity), React.createElement(TableCell, {\n      align: \"center\",\n      className: styles.tableBodyCenter + ' ' + styles.comment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, cartProduct.comment), React.createElement(TableCell, {\n      align: \"right\",\n      className: styles.tableBodyEdge,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, cartProduct.finalPrice)))));\n  }\n\n}\n\nComponent.propTypes = {\n  cartProducts: PropTypes.array,\n  addOrderRequest: PropTypes.func,\n  clearCartProducts: PropTypes.func,\n  getCartProducts: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  cartProducts: getAllCartProducts(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addOrderRequest: orderData => dispatch(addOrderRequest(orderData)),\n  clearCartProducts: () => dispatch(clearCartRequest()),\n  getCartProducts: () => dispatch(getCartProductsRequest())\n});\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Component);\nexport { //Component as OrderSummary,\nContainer as OrderSummary, Component as OrderSummaryComponent };","map":{"version":3,"sources":["/Users/katarzynaiwaszko/Documents/projekty_Kodilla/Shop/client/src/components/views/OrderSummary/OrderSummary.js"],"names":["React","PropTypes","NavLink","OrderSummaryList","OrderForm","connect","getAllCartProducts","clearCartRequest","getCartProductsRequest","addOrderRequest","styles","Paper","Typography","Grid","Button","ArrowBackIosIcon","SendIcon","Table","TableHead","TableRow","TableCell","TableBody","Component","state","orderData","name","surname","email","phone","message","ordered","totalCost","orderDetails","props","cartProducts","handleChange","event","target","value","id","setState","setOrderParams","date","Date","submitForm","preventDefault","error","length","alert","clearCart","componentDidMount","getCartProducts","map","cartProduct","totalPrice","clearCartProducts","render","tableHeader","tableBodyEdge","tableBodyCenter","quantity","comment","finalPrice","propTypes","array","func","mapStateToProps","mapDispatchToProps","dispatch","Container","OrderSummary","OrderSummaryComponent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\n\nimport { OrderSummaryList } from '../../features/OrderSummaryList/OrderSummaryList';\nimport { OrderForm } from '../../features/OrderForm/OrderForm';\n\nimport { connect } from 'react-redux';\nimport { getAllCartProducts, clearCartRequest, getCartProductsRequest } from '../../../redux/cartRedux.js';\nimport { addOrderRequest } from '../../../redux/ordersRedux';\n\n\nimport styles from './OrderSummary.module.scss';\n\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport SendIcon from '@material-ui/icons/Send';\n\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\n\nclass Component extends React.Component {\n  state = {\n    orderData: {\n      name: '',\n      surname: '',\n      email: '',\n      phone: '',\n      message: '',\n      ordered: '',\n      totalCost: '',\n      orderDetails: this.props.cartProducts,\n    }, \n  }\n\n  static propTypes = {\n    cartProducts: PropTypes.array,\n    addOrderRequest: PropTypes.func,\n    clearCartProducts: PropTypes.func,\n    getCartProducts: PropTypes.func,\n  }\n\n  componentDidMount() {\n    const { getCartProducts } = this.props;\n\n    getCartProducts();\n  }\n\n  totalCost() {\n    const { cartProducts } = this.props;\n\n    let totalCost = 0;\n\n    cartProducts.map(cartProduct => totalCost += cartProduct.totalPrice);\n\n    return totalCost;\n  }\n\n  handleChange = (event) => {\n    const { orderData } = this.state;\n    const { value, id, name } = event.target;\n\n    if(id) {\n      this.setState({\n        orderData: {\n          ...orderData,\n          [id]: value,\n        },\n      })\n    }\n    else {\n      this.setState({\n        orderData: {\n          ...orderData,\n          [name]: value,\n        },\n      });\n    }\n  }\n\n  setOrderParams = () => {\n    const { orderData } = this.state;\n    const date = new Date();\n    const totalCost = this.totalCost();\n\n    this.setState({\n      orderData: {\n        ...orderData,\n        ordered: date,\n        totalCost: totalCost,\n      },\n    });\n  }\n\n  clearCart() {\n    const { clearCartProducts } = this.props;\n    this.setState({\n      orderData: {\n        name: '',\n        surname: '',\n        email: '',\n        phone: '',\n        message: '',\n        ordered: '',\n        totalCost: '',\n      },\n    });\n    clearCartProducts();\n  }  \n\n  submitForm = async(event) => {\n    const { orderData } = this.state;\n    const { addOrderRequest, cartProducts } = this.props;\n\n    event.preventDefault();\n\n    let error = null;\n\n    if(cartProducts.length === 0) error='Your cart is empty!';\n\n    if(!orderData.name.length || !orderData.surname.length || !orderData.email.length || !orderData.phone) error='All form fields should be filled';\n    else if(orderData.name.length > 15 || orderData.surname.length > 20) error ='Name or surname is too long. Name max 15 characters, surname max 20';\n\n    if(!error) {\n      await addOrderRequest(orderData);\n      alert('Order submitted successfully');\n      this.clearCart();\n    } else {\n      alert(error);\n    }\n  }\n\n  render() {\n    const { cartProducts } = this.props;\n    const { orderData } = this.state;\n\n    return(\n<Table>\n    <TableHead>\n      <TableRow>\n\n        <TableCell\n          align='left'\n          className={styles.tableHeader}\n        >\n          Product\n        </TableCell>\n\n        <TableCell\n          align='center'\n          className={styles.tableHeader}\n        >\n          Quantity\n        </TableCell>\n\n        <TableCell\n          align='center'\n          className={styles.tableHeader}\n        >\n          Comment\n        </TableCell>\n\n        <TableCell\n          align='right'\n          className={styles.tableHeader}\n        >\n          Price\n        </TableCell>\n\n      </TableRow>\n    </TableHead>\n\n    <TableBody>\n      {cartProducts.map(cartProduct => (\n        <TableRow key={cartProduct.id}>\n\n          <TableCell\n            align='left'\n            className={styles.tableBodyEdge}\n          >\n            {cartProduct.name}\n          </TableCell>\n\n          <TableCell\n            align='center'\n            className={styles.tableBodyCenter}\n          >\n            {cartProduct.quantity}\n          </TableCell>\n\n          <TableCell\n            align='center'\n            className={styles.tableBodyCenter + ' ' + styles.comment}\n          >\n            {cartProduct.comment}\n          </TableCell>\n\n          <TableCell\n            align='right'\n            className={styles.tableBodyEdge}\n          >\n            {cartProduct.finalPrice}\n          </TableCell>\n\n        </TableRow>\n      ))}\n    </TableBody>\n  </Table>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  cartProducts: getAllCartProducts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addOrderRequest: orderData => dispatch(addOrderRequest(orderData)),\n  clearCartProducts: () => dispatch(clearCartRequest()),\n  getCartProducts: () => dispatch(getCartProductsRequest()),\n});\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport {\n  //Component as OrderSummary,\n  Container as OrderSummary,\n  Component as OrderSummaryComponent,\n};\n"]},"metadata":{},"sourceType":"module"}