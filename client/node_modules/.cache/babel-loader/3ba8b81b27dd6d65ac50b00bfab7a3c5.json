{"ast":null,"code":"import _defineProperty from \"/Users/katarzynaiwaszko/Documents/projekty_Kodilla/Shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/katarzynaiwaszko/Documents/projekty_Kodilla/Shop/src/components/views/OrderSummary/OrderSummary.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { OrderSummaryList } from '../../features/OrderSummaryList/OrderSummaryList';\nimport { OrderForm } from '../../features/OrderForm/OrderForm';\nimport { connect } from 'react-redux';\nimport { getAllCartProducts, clearCart } from '../../../redux/cartRedux.js';\nimport { addOrder } from '../../../redux/ordersRedux';\nimport styles from './OrderSummary.module.scss';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\nclass Component extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderData: {\n        name: '',\n        surname: '',\n        email: '',\n        telephone: '',\n        ordered: '',\n        orderDetails: this.props.cartProducts\n      }\n    };\n\n    this.handleChange = event => {\n      const orderData = this.state.orderData;\n      const _event$target = event.target,\n            value = _event$target.value,\n            id = _event$target.id;\n      this.setState({\n        orderData: _objectSpread({}, orderData, {\n          [id]: value\n        })\n      });\n    };\n\n    this.setOrderDate = () => {\n      const orderData = this.state.orderData;\n      const date = new Date();\n      this.setState({\n        orderData: _objectSpread({}, orderData, {\n          ordered: date\n        })\n      });\n    };\n\n    this.submitForm = event => {\n      const orderData = this.state.orderData;\n      const addOrder = this.props.addOrder;\n      event.preventDefault();\n      let error = null;\n      if (!orderData.name.length || !orderData.surname.length || !orderData.email.length || !orderData.phone.length) error = 'All form fields should be filled';else if (orderData.name.length > 15 || orderData.surname.length > 20) error = 'Name or surname is too long. Name max 15 characters, surname max 20';\n\n      if (!error) {\n        addOrder(orderData);\n        alert('Order submitted successfully');\n        this.clearCart();\n      } else {\n        alert(error);\n      }\n    };\n  }\n\n  totalCost() {\n    const cartProducts = this.props.cartProducts;\n    let totalCost = 0;\n    cartProducts.map(cartProduct => totalCost += cartProduct.totalPrice);\n    return totalCost;\n  }\n\n  clearCart() {\n    const clearCartProducts = this.props.clearCartProducts;\n    this.setState({\n      orderData: {\n        name: '',\n        surname: '',\n        email: '',\n        phone: '',\n        ordered: ''\n      }\n    });\n    clearCartProducts();\n  }\n\n  render() {\n    const cartProducts = this.props.cartProducts;\n    const orderData = this.state.orderData;\n    return React.createElement(Paper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: styles.title,\n      gutterBottom: true,\n      variant: \"h3\",\n      component: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"ORDER SUMMARY\")), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      className: styles.orderList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(OrderSummaryList, {\n      cartProducts: cartProducts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      className: styles.totalCostContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: styles.title,\n      gutterBottom: true,\n      variant: \"h4\",\n      component: \"span\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Total cost:\", this.totalCost(), \"$\")), React.createElement(OrderForm, {\n      orderData: orderData,\n      handleChange: this.handleChange,\n      submitForm: this.submitForm,\n      setOrderDate: this.setOrderDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }));\n  }\n\n}\n\nComponent.propTypes = {\n  cartProducts: PropTypes.array,\n  addOrder: PropTypes.func,\n  clearCartProducts: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  cartProducts: getAllCartProducts(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addOrder: orderData => dispatch(addOrder(orderData)),\n  clearCartProducts: () => dispatch(clearCart())\n});\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Component);\nexport { //Component as OrderSummary,\nContainer as OrderSummary, Component as OrderSummaryComponent };","map":{"version":3,"sources":["/Users/katarzynaiwaszko/Documents/projekty_Kodilla/Shop/src/components/views/OrderSummary/OrderSummary.js"],"names":["React","PropTypes","OrderSummaryList","OrderForm","connect","getAllCartProducts","clearCart","addOrder","styles","Paper","Typography","Grid","Component","state","orderData","name","surname","email","telephone","ordered","orderDetails","props","cartProducts","handleChange","event","target","value","id","setState","setOrderDate","date","Date","submitForm","preventDefault","error","length","phone","alert","totalCost","map","cartProduct","totalPrice","clearCartProducts","render","title","orderList","totalCostContainer","propTypes","array","func","mapStateToProps","mapDispatchToProps","dispatch","Container","OrderSummary","OrderSummaryComponent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { OrderSummaryList } from '../../features/OrderSummaryList/OrderSummaryList';\nimport { OrderForm } from '../../features/OrderForm/OrderForm';\n\nimport { connect } from 'react-redux';\nimport { getAllCartProducts, clearCart } from '../../../redux/cartRedux.js';\nimport { addOrder } from '../../../redux/ordersRedux';\n\nimport styles from './OrderSummary.module.scss';\n\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\nclass Component extends React.Component {\n  state = {\n    orderData: {\n      name: '',\n      surname: '',\n      email: '',\n      telephone: '',\n      ordered: '',\n      orderDetails: this.props.cartProducts,\n    }, \n  }\n\n  static propTypes = {\n    cartProducts: PropTypes.array,\n    addOrder: PropTypes.func,\n    clearCartProducts: PropTypes.func,\n  }\n\n  totalCost() {\n    const { cartProducts } = this.props;\n\n    let totalCost = 0;\n\n    cartProducts.map(cartProduct => totalCost += cartProduct.totalPrice);\n\n    return totalCost;\n  }\n\n  handleChange = (event) => {\n    const { orderData } = this.state;\n    const { value, id } = event.target;\n\n    this.setState({\n      orderData: {\n        ...orderData,\n        [id]: value,\n      },\n    });\n  }\n\n  setOrderDate = () => {\n    const { orderData } = this.state;\n    const date = new Date();\n\n    this.setState({\n      orderData: {\n        ...orderData,\n        ordered: date,\n      },\n    });\n  }\n\n  clearCart() {\n    const { clearCartProducts } = this.props;\n    this.setState({\n      orderData: {\n        name: '',\n        surname: '',\n        email: '',\n        phone: '',\n        ordered: '',\n      },\n    });\n    clearCartProducts();\n  }  \n\n  submitForm = (event) => {\n    const { orderData } = this.state;\n    const { addOrder } = this.props;\n\n    event.preventDefault();\n\n    let error = null;\n\n    if(!orderData.name.length || !orderData.surname.length || !orderData.email.length || !orderData.phone.length) error='All form fields should be filled';\n    else if(orderData.name.length > 15 || orderData.surname.length > 20) error ='Name or surname is too long. Name max 15 characters, surname max 20';\n\n    if(!error) {\n      addOrder(orderData);\n      alert('Order submitted successfully');\n      this.clearCart();\n    } else {\n      alert(error);\n    }\n  }\n\n  render() {\n    const { cartProducts } = this.props;\n    const { orderData } = this.state;\n\n    return(\n      <Paper>\n        <Grid item xs={12}>\n          <Typography\n            className={styles.title}\n            gutterBottom\n            variant='h3'\n            component='h1'\n          >\n            ORDER SUMMARY\n          </Typography>\n        </Grid>\n\n        <Grid item xs={12} className={styles.orderList}>\n          <OrderSummaryList cartProducts={cartProducts} />\n        </Grid>\n        \n        <Grid item xs={12} className={styles.totalCostContainer}>\n          <Typography className={styles.title} gutterBottom variant=\"h4\" component=\"span\">\n            Total cost:{this.totalCost()}$\n          </Typography>\n        </Grid>\n\n\n        \n        <OrderForm\n          orderData={orderData}\n          handleChange={this.handleChange}\n          submitForm={this.submitForm}\n          setOrderDate={this.setOrderDate}\n        />\n      </Paper>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  cartProducts: getAllCartProducts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addOrder: orderData => dispatch(addOrder(orderData)),\n  clearCartProducts: () => dispatch(clearCart()),\n});\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport {\n  //Component as OrderSummary,\n  Container as OrderSummary,\n  Component as OrderSummaryComponent,\n};\n"]},"metadata":{},"sourceType":"module"}