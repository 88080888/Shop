{"ast":null,"code":"import _defineProperty from \"/Users/katarzynaiwaszko/Documents/projekty_Kodilla/Shop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/katarzynaiwaszko/Documents/projekty_Kodilla/Shop/client/src/components/features/CartProduct/CartProduct.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\nimport { ProductCount } from '../ProductCount/ProductCount';\nimport { connect } from 'react-redux';\nimport { removeCartProductRequest, updateCartProductRequest } from '../../../redux/cartRedux.js';\nimport { formInputNumberParser } from '../../../utils';\nimport styles from './CartProduct.module.scss';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nclass Component extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cartProductData: {\n        totalPrice: this.props.totalPrice,\n        quantity: this.props.quantity,\n        comment: this.props.comment\n      }\n    };\n\n    this.removeFromCart = () => {\n      const _this$props = this.props,\n            id = _this$props.id,\n            removeCartProduct = _this$props.removeCartProduct;\n      removeCartProduct(id);\n    };\n\n    this.handleQuantityChange = event => {\n      const cartProductData = this.state.cartProductData;\n      const _event$target = event.target,\n            value = _event$target.value,\n            id = _event$target.id;\n      const _this$props2 = this.props,\n            price = _this$props2.price,\n            updateCartProduct = _this$props2.updateCartProduct;\n      const parsedValue = formInputNumberParser(value);\n      const totalPrice = parsedValue * price;\n      this.setState({\n        cartProductData: _objectSpread({}, cartProductData, {\n          totalPrice: totalPrice,\n          [id]: parsedValue\n        })\n      });\n      const cartProduct = {};\n      cartProduct.id = this.props.id;\n      cartProduct.key = id;\n      cartProduct.value = parsedValue;\n      cartProduct.totalPrice = totalPrice;\n      updateCartProduct(cartProduct);\n    };\n\n    this.handleCommentChange = event => {\n      const cartProductData = this.state.cartProductData;\n      const value = event.target.value;\n      const _this$props3 = this.props,\n            updateCartProduct = _this$props3.updateCartProduct,\n            id = _this$props3.id;\n      this.setState({\n        cartProductData: _objectSpread({}, cartProductData, {\n          'comment': value\n        })\n      });\n      const cartProduct = {};\n      cartProduct.id = id;\n      cartProduct.key = 'comment';\n      cartProduct.value = value;\n      updateCartProduct(cartProduct);\n    };\n\n    this.increaseCartProductQuantity = () => {\n      const cartProductData = this.state.cartProductData;\n      const _this$props4 = this.props,\n            price = _this$props4.price,\n            id = _this$props4.id,\n            updateCartProduct = _this$props4.updateCartProduct;\n\n      if (cartProductData.quantity === 999) {\n        return;\n      }\n\n      const newQuantity = cartProductData.quantity + 1;\n      const totalPrice = newQuantity * price;\n      this.setState({\n        cartProductData: _objectSpread({}, cartProductData, {\n          quantity: newQuantity,\n          totalPrice: totalPrice\n        })\n      });\n      const cartProduct = {};\n      cartProduct.id = id;\n      cartProduct.key = 'quantity';\n      cartProduct.value = newQuantity;\n      cartProduct.totalPrice = totalPrice;\n      updateCartProduct(cartProduct);\n    };\n\n    this.decreaseCartProductQuantity = () => {\n      const cartProductData = this.state.cartProductData;\n      const _this$props5 = this.props,\n            price = _this$props5.price,\n            id = _this$props5.id,\n            updateCartProduct = _this$props5.updateCartProduct;\n\n      if (cartProductData.quantity === 1) {\n        return;\n      }\n\n      const newQuantity = cartProductData.quantity - 1;\n      const totalPrice = newQuantity * price;\n      this.setState({\n        cartProductData: _objectSpread({}, cartProductData, {\n          quantity: newQuantity,\n          totalPrice: totalPrice\n        })\n      });\n      const cartProduct = {};\n      cartProduct.id = id;\n      cartProduct.key = 'quantity';\n      cartProduct.value = newQuantity;\n      cartProduct.totalPrice = totalPrice;\n      updateCartProduct(cartProduct);\n    };\n  }\n\n  render() {\n    const _this$props6 = this.props,\n          name = _this$props6.name,\n          photo = _this$props6.photo;\n    const cartProductData = this.state.cartProductData;\n    return React.createElement(Grid, {\n      container: true,\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      className: styles.cartItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(ButtonBase, {\n      className: styles.imageContainer,\n      component: NavLink,\n      exact: true,\n      to: \"/product/\".concat(productId),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: styles.image,\n      src: photo,\n      alt: \"product\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: true,\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: true,\n      container: true,\n      direction: \"column\",\n      spacing: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: styles.productName,\n      gutterBottom: true,\n      variant: \"subtitle1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, name)), React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(ProductCount, {\n      handleChange: this.handleQuantityChange,\n      quantity: cartProductData.quantity,\n      increase: this.increaseCartProductQuantity,\n      decrease: this.decreaseCartProductQuantity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      id: \"comment\",\n      label: \"Comment\",\n      variant: \"outlined\",\n      multiline: true,\n      rowsMax: 4,\n      inputProps: {\n        maxLength: 100\n      },\n      className: styles.commentField,\n      value: cartProductData.comment,\n      onChange: this.handleCommentChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      item: true,\n      xs: true,\n      container: true,\n      direction: \"column\",\n      spacing: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      className: styles.price,\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"$\", cartProductData.totalPrice), React.createElement(Grid, {\n      item: true,\n      className: styles.iconContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.removeFromCart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(DeleteIcon, {\n      className: styles.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }))))));\n  }\n\n} // const mapStateToProps = state => ({\n//   someProp: reduxSelector(state),\n// });\n\n\nComponent.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  photo: PropTypes.node,\n  quantity: PropTypes.number,\n  price: PropTypes.number,\n  comment: PropTypes.string,\n  removeCartProduct: PropTypes.func,\n  totalPrice: PropTypes.number,\n  updateCartProduct: PropTypes.func,\n  productId: PropTypes.string\n};\n\nconst mapDispatchToProps = dispatch => ({\n  removeCartProduct: id => dispatch(removeCartProductRequest(id)),\n  updateCartProduct: updatedCartProduct => dispatch(updateCartProductRequest(updatedCartProduct))\n});\n\nconst Container = connect(null, mapDispatchToProps)(Component);\nexport { //Component as CartProduct,\nContainer as CartProduct, Component as CartProductComponent };","map":{"version":3,"sources":["/Users/katarzynaiwaszko/Documents/projekty_Kodilla/Shop/client/src/components/features/CartProduct/CartProduct.js"],"names":["React","PropTypes","NavLink","ProductCount","connect","removeCartProductRequest","updateCartProductRequest","formInputNumberParser","styles","Grid","Button","ButtonBase","Typography","TextField","DeleteIcon","Component","state","cartProductData","totalPrice","props","quantity","comment","removeFromCart","id","removeCartProduct","handleQuantityChange","event","target","value","price","updateCartProduct","parsedValue","setState","cartProduct","key","handleCommentChange","increaseCartProductQuantity","newQuantity","decreaseCartProductQuantity","render","name","photo","cartItem","imageContainer","productId","image","productName","maxLength","commentField","iconContainer","icon","propTypes","string","node","number","func","mapDispatchToProps","dispatch","updatedCartProduct","Container","CartProduct","CartProductComponent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\n\nimport { ProductCount } from '../ProductCount/ProductCount';\nimport { connect } from 'react-redux';\nimport { removeCartProductRequest, updateCartProductRequest } from '../../../redux/cartRedux.js';\nimport { formInputNumberParser } from '../../../utils';\n\nimport styles from './CartProduct.module.scss';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\n\nclass Component extends React.Component {\n\n  state = {\n    cartProductData: {\n      totalPrice: this.props.totalPrice,\n      quantity: this.props.quantity,\n      comment: this.props.comment,\n    },\n  }\n\n  static propTypes = {\n    id: PropTypes.string,\n    name: PropTypes.string,\n    photo: PropTypes.node,\n    quantity: PropTypes.number,\n    price: PropTypes.number,\n    comment: PropTypes.string,\n    removeCartProduct: PropTypes.func,\n    totalPrice: PropTypes.number,\n    updateCartProduct: PropTypes.func,\n    productId: PropTypes.string,\n  }\n\n  removeFromCart = () => {\n    const { id, removeCartProduct } = this.props;\n    removeCartProduct(id);\n  }\n\n  handleQuantityChange = (event) => {\n    const { cartProductData } = this.state;\n    const { value, id } = event.target;\n    const { price, updateCartProduct } = this.props;\n\n    const parsedValue = formInputNumberParser(value);\n    const totalPrice = parsedValue * price;\n\n    this.setState({\n      cartProductData: {\n        ...cartProductData,\n        totalPrice: totalPrice,\n        [id]: parsedValue,\n      },\n    });\n\n    const cartProduct = {};\n\n    cartProduct.id = this.props.id;\n    cartProduct.key = id;\n    cartProduct.value = parsedValue;\n    cartProduct.totalPrice = totalPrice;\n\n    updateCartProduct(cartProduct);\n  }\n\n  handleCommentChange = (event) => {\n    const { cartProductData } = this.state;\n    const { value } = event.target;\n    const { updateCartProduct, id } = this.props;\n\n    this.setState({\n      cartProductData: {\n        ...cartProductData,\n        'comment': value,\n      },\n    });\n\n    const cartProduct = {};\n\n    cartProduct.id = id;\n    cartProduct.key = 'comment';\n    cartProduct.value = value;\n\n    updateCartProduct(cartProduct);\n  }\n\n  increaseCartProductQuantity = () => {\n    const { cartProductData } = this.state;\n    const { price, id, updateCartProduct } = this.props;\n\n    if(cartProductData.quantity === 999) {\n      return;\n    }\n\n    const newQuantity = cartProductData.quantity + 1;\n    const totalPrice = newQuantity * price;\n\n    this.setState({\n      cartProductData: {\n        ...cartProductData,\n        quantity: newQuantity,\n        totalPrice: totalPrice,\n      },\n    });\n\n    const cartProduct = {};\n\n    cartProduct.id = id;\n    cartProduct.key = 'quantity';\n    cartProduct.value = newQuantity;\n    cartProduct.totalPrice = totalPrice;\n\n    updateCartProduct(cartProduct);\n  }\n\n  decreaseCartProductQuantity = () => {\n    const { cartProductData } = this.state;\n    const { price, id, updateCartProduct } = this.props;\n\n    if(cartProductData.quantity === 1) {\n      return;\n    }\n\n    const newQuantity = cartProductData.quantity - 1;\n    const totalPrice = newQuantity * price;\n\n    this.setState({\n      cartProductData: {\n        ...cartProductData,\n        quantity: newQuantity,\n        totalPrice: totalPrice,\n      },\n    });\n\n    const cartProduct = {};\n\n    cartProduct.id = id;\n    cartProduct.key = 'quantity';\n    cartProduct.value = newQuantity;\n    cartProduct.totalPrice = totalPrice;\n\n    updateCartProduct(cartProduct);\n  }\n\n  render() {\n    const { name, photo } = this.props;\n    const { cartProductData } = this.state;\n\n    return(\n      <Grid container align='center'>\n\n        <Grid item className={styles.cartItem}>\n          <ButtonBase\n            className={styles.imageContainer}\n                        component={NavLink}\n            exact to={`/product/${productId}`}\n          >\n            <img className={styles.image} src={photo} alt='product' />\n          </ButtonBase>\n        </Grid>\n\n        <Grid item xs={12} sm container>\n\n          <Grid  item xs container direction='column' spacing={2}>\n            <Grid item xs>\n              <Typography className={styles.productName} gutterBottom variant='subtitle1'>\n                {name}\n              </Typography>\n            </Grid>\n            <Grid item xs>\n              <ProductCount handleChange={this.handleQuantityChange} quantity={cartProductData.quantity} increase={this.increaseCartProductQuantity} decrease={this.decreaseCartProductQuantity} />\n            </Grid>\n            <Grid item xs>\n              <TextField\n                id='comment'\n                label='Comment'\n                variant='outlined'\n                multiline\n                rowsMax={4}\n                inputProps={{\n                  maxLength: 100,\n                }}\n                className={styles.commentField}\n                value={cartProductData.comment}\n                onChange={this.handleCommentChange}\n              />\n            </Grid>\n          </Grid>\n\n          <Grid  item xs container direction='column' spacing={2}>\n            <Grid className={styles.price} item>\n              ${cartProductData.totalPrice}\n            </Grid>\n            <Grid item className={styles.iconContainer}>\n              <Button onClick={this.removeFromCart}>\n                <DeleteIcon className={styles.icon} />\n              </Button>\n            </Grid>\n          </Grid>\n\n        </Grid>\n\n      </Grid>\n    );\n  }\n}\n\n\n// const mapStateToProps = state => ({\n//   someProp: reduxSelector(state),\n// });\n\nconst mapDispatchToProps = dispatch => ({\n  removeCartProduct: id => dispatch(removeCartProductRequest(id)),\n  updateCartProduct: updatedCartProduct => dispatch(updateCartProductRequest(updatedCartProduct)),\n});\n\nconst Container = connect(null, mapDispatchToProps)(Component);\n\nexport {\n  //Component as CartProduct,\n  Container as CartProduct,\n  Component as CartProductComponent,\n};\n"]},"metadata":{},"sourceType":"module"}